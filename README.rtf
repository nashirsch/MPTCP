{\rtf1\ansi\ansicpg1252\cocoartf1548
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red208\green208\blue208;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c85098\c85098\c85098;\csgray\c0\c0;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 MultiPath Transmission Control Protocol\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 UChicago CMSC 23300 Project 2\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Author: Noah Hirsch\
\
\
README:\
\
This multi-threaded program transfers a file to a given server IP/Port pair along a given number of connections. It manages the transfer of a text file, shared among all of the paths. It also includes dropped packet retransmission capability.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Note - The libmptcp_32.a library which this program relies on is compiled for macOS.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
Command Line Usage:\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
1) make
\f0\b0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
2) ./mptcp [ num_interfaces ] [ hostname ] [ port ] [ filename ]\cb4 \
\

\f0\b0\fs24 This program opens [ num_interfaces ] connections with the server at [ hostname ] / [ port ], and transfers [ filename ] along these connections. If the transfer is successful, it will print \'93File transfer complete\'94. If it fails, it will print \'93File transfer error\'94. \
\
\
Issues:\
\
I had trouble identifying how to keep track of exactly which packets were being dropped and on which paths, given that the packets sent are path-specific while the ACKs they receive are not path specific. This was remedied by keeping unACKed packet sequence numbers in a path-specific queue, and checking ACKs against said queue. At the moment, I do not believe there to be any issues with this program.\
\
\
Congestion Control:\
\
I used a variation of TCP Tahoe, except my program immediately retransmits a packet upon receiving a duplicate ACK. Specifically, ssthresh begins at INT_MAX, and cwnd begins at 1. The initial congestion mode is exponential, so cwnd doubles when cwnd ACKs are recieved. If cwnd reaches ssthresh, then congestion mode is changed to additive and cwnd gains 1 when cwnd ACKs are recieved. If a packet is dropped, ssthresh is set to half of cwnd, cwnd is set back to 1, and the congestion mode is reset to exponential.
\f2\b\fs34\fsmilli17333 \
}